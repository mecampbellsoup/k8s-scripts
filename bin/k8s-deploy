#!/bin/bash

. k8s-read-config

echo "Deploying ConfigMaps"
for index in "${!CONFIGMAP_FILES[@]}"; do
  CONFIGMAP_FILE=${CONFIGMAP_FILES[$index]}
  echo "Appending ${CI_SHA1} to configmap filename"
  cp ${CONFIGMAP_FILE} ${CONFIGMAP_FILE}-${CI_SHA1}
  CONFIGMAP_FILE=${CONFIGMAP_FILE}-${CI_SHA1}
  echo "Applying ${CONFIGMAP_FILE}"
  kubectl apply -f ${CONFIGMAP_FILE} --namespace=$NAMESPACE --record
  if [ $? -ne 0 ]
  then
    echo "Apply failed, aborting"
    exit 1
  fi
done
echo "Done deploying ConfigMaps"

echo "Deploying Secrets"
for index in "${!SECRET_FILES[@]}"
do
  SECRET_FILE=${SECRET_FILES[$index]}
  echo "Appending ${CI_SHA1} to secret filename"
  cp ${SECRET_FILE} ${SECRET_FILE}-${CI_SHA1}
  SECRET_FILE=${SECRET_FILE}-${CI_SHA1}
  echo "Applying ${SECRET_FILE}"
  kubectl apply -f ${SECRET_FILE} --namespace=$NAMESPACE
  if [ $? -ne 0 ]
  then
    echo "Apply failed, aborting"
    exit 1
  fi
done
echo "Done deploying Secrets"

echo "Deploying Services"
for index in "${!SERVICE_FILES[@]}"
do
  SERVICE=${SERVICES[$index]##*/}
  SERVICE_FILE=${SERVICE_FILES[$index]}
  kubectl get service ${SERVICE} --namespace=$NAMESPACE &>/dev/null
  if [ $? -ne 0 ]
  then
   echo "Service ${SERVICE} does not exist yet, creating it"
   kubectl create -f ${SERVICE_FILE} --namespace=$NAMESPACE --record
   if [ $? -ne 0 ]
   then
     echo "Create failed, aborting"
     exit 1
   fi
  else
   echo "Service ${SERVICE} already exists"
  fi
done
echo "Done deploying Services"

echo "Deploying Ingress"
for index in "${!INGRESS_FILES[@]}"
do
  INGRES=${INGRESS[$index]##*/}
  INGRESS_FILE=${INGRESS_FILES[$index]}
  kubectl get ingress ${INGRES} --namespace=$NAMESPACE &>/dev/null
  if [ $? -ne 0 ]
  then
   echo "Ingress ${INGRES} does not exist yet, creating it"
   kubectl create -f ${INGRESS_FILE} --namespace=$NAMESPACE --record
   if [ $? -ne 0 ]
   then
     echo "Create failed, aborting"
     exit 1
   fi
  else
   echo "Ingress ${INGRES} already exists"
  fi
done
echo "Done deploying Ingress"

echo "Deploying Jobs"
for index in "${!JOBS_FILES[@]}"
do
  JOB=${JOBS[$index]##*/}
  JOB_FILE=${JOBS_FILES[$index]}
  kubectl get job ${JOB} --namespace=$NAMESPACE &>/dev/null
  if [ $? -ne 0 ]
  then
   echo "Job ${JOB} does not exist yet, creating it"
   kubectl create -f ${JOB_FILE} --namespace=$NAMESPACE --record
   if [ $? -ne 0 ]
   then
     echo "Create failed, aborting"
     exit 1
   fi
  else
   echo "Job ${JOB} already exists"
  fi
done
echo "Done deploying Job"

echo "Deploying Blocking Jobs"
for index in "${!BLOCKING_JOBS_FILES[@]}"
do
  BLOCKING_JOB=${BLOCKING_JOBS[$index]##*/}
  BLOCKING_JOB_FILE=${BLOCKING_JOBS_FILES[$index]}
  kubectl get job ${BLOCKING_JOB} --namespace=$NAMESPACE &>/dev/null
  if [ $? -ne 0 ]
  then
   echo "Blocking Job ${BLOCKING_JOB} does not exist yet, creating it"
   kubectl create -f ${BLOCKING_JOB_FILE} --record
   if [ $? -ne 0 ]
   then
     echo "Create failed, aborting"
     exit 1
   fi
  fi
  kubectl apply -f ${BLOCKING_JOB_FILE} --namespace=$NAMESPACE
  if [ $? -ne 0 ]
  then
    echo "Apply failed, aborting"
    exit 1
  fi
done
echo "Done deploying Blocking Jobs"
echo ""

echo "Running Blocking Jobs"
for index in "${!BLOCKING_JOBS[@]}"
do
  BLOCKING_JOB=${BLOCKING_JOBS[$index]##*/}
  echo "Checking jobs for $BLOCKING_JOB"
  timeout.sh -t ${DEPLOY_TIMEOUT} run-blocking-job $BLOCKING_JOB $NAMESPACE
  result=$?
  if [ "$result" == "143" ] ; then
      echo "------- BLOCKING JOB TIMEOUT FAIL --------"
      exit 1
  fi
  if [ "$result" == "0" ] ; then
    echo "BLOCKING JOB SUCCESFULL"
  else
    echo "BLOCKING JOB FAILED"
    exit $result
  fi
done

echo "Deploying Deployments"
for index in "${!DEPLOYMENT_FILES[@]}"
do
  DEPLOYMENT=${DEPLOYMENTS[$index]##*/}
  DEPLOYMENT_FILE=${DEPLOYMENT_FILES[$index]}
  kubectl get deployment ${DEPLOYMENT} --namespace=$NAMESPACE &>/dev/null
  if [ $? -ne 0 ]
  then
   echo "Deployment ${DEPLOYMENT} does not exist yet, creating it"
   kubectl create -f ${DEPLOYMENT_FILE} --record
   if [ $? -ne 0 ]
   then
     echo "Create failed, aborting"
     exit 1
   fi
  fi
  if [ -n "$CI_SHA1" ]
  then
    echo "Updating image tag from latest to ${CI_SHA1} for ${DEPLOYMENT_FILE}"
    sed 's/:latest/':${CI_SHA1}'/g;' ${DEPLOYMENT_FILE} > ${DEPLOYMENT_FILE}-${CI_SHA1}
    echo "Updating ${DEPLOYMENT_FILE}-${CI_SHA1}"
    DEPLOYMENT_FILE=${DEPLOYMENT_FILE}-${CI_SHA1}
  fi
  kubectl apply -f ${DEPLOYMENT_FILE} --namespace=$NAMESPACE
  if [ $? -ne 0 ]
  then
    echo "Apply failed, aborting"
    exit 1
  fi

done
echo "Done deploying Deployments"
echo ""

echo "Verifying successful deployments"
for index in "${!DEPLOYMENTS[@]}"
do
  DEPLOYMENT=${DEPLOYMENTS[$index]##*/}
  echo "Checking deployment for $DEPLOYMENT"
  timeout.sh -t ${DEPLOY_TIMEOUT} verify-deployment $DEPLOYMENT $NAMESPACE
  result=$?
  if [ "$result" == "143" ] ; then
      echo "------- DEPLOYMENT TIMEOUT FAIL --------"
      exit 1
  fi
  if [ "$result" == "0" ] ; then
    echo "DEPLOY SUCCESFULL"
  else
    echo "DEPLOY FAILED"
    exit $result
  fi
done

echo "All objects created"
echo ""
